{
    "|js| Определяет девайс": {
        "prefix": "w-script-device",
        "body": [
            "<script id=\"w-device\">",
            "   function getDeviceType() {",
            "      if ('ontouchstart' in window || navigator.maxTouchPoints) {",
            "         document.body.id = 'w-device-touch'",
            "      } else {",
            "         document.body.id = 'w-device-desctop'",
            "      }",
            "   }",
            "",
            "   getDeviceType();",
            "</script>"
        ],
        "discription": "-",
        "group": "Стандартные",
        "dependence": "-",
        "status": true,
        "key": "|js| Определяет девайс"
    },
    "|links| Подключение slider swiper ": {
        "prefix": "w-links-slider-wrapper",
        "body": [
            "<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css\">",
            "",
            "<script src=\"https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js\"></script>"
        ],
        "discription": "Подключаем в header",
        "group": "Зависимые",
        "dependence": "-",
        "status": true
    },
    "|css| |js| Появление объектов при скролле": {
        "prefix": "w-css-animation-scroll",
        "body": [
            "<!-- Добавляем объекту который должен появляться при скролле класс w-anim-item,",
            "      затем из style добавляем класс анимации",
            "-->",
            "",
            "<style id=\"w-css-animation-scroll\">",
            "   .w-anim-bottom {",
            "      transform: translate(0, 120%);",
            "      opacity: 0;",
            "      transition: all .8s ease 0s;",
            "   }",
            "",
            "   .w-anim-bottom.w-active,",
            "   .w-active .w-anim-bottom {",
            "      transform: translate(0, 0);",
            "      opacity: 1;",
            "   }",
            "",
            "   .w-anim-top {",
            "      transform: translate(0, -120%);",
            "      opacity: 0;",
            "      transition: all .8s ease 0s;",
            "   }",
            "",
            "   .w-anim-top.w-active {",
            "      transform: translate(0, 0);",
            "      opacity: 1;",
            "   }",
            "",
            "   .w-anim-left {",
            "      transform: translate(-120%, 0);",
            "      opacity: 0;",
            "      transition: all .8s ease 0s;",
            "   }",
            "",
            "   .w-anim-left.w-active {",
            "      transform: translate(0, 0);",
            "      opacity: 1;",
            "   }",
            "",
            "   .w-anim-right {",
            "      transform: translate(120%, 0);",
            "      opacity: 0;",
            "      transition: all .8s ease 0s;",
            "   }",
            "",
            "   .w-anim-right.w-active {",
            "      transform: translate(0, 0);",
            "      opacity: 1;",
            "   }",
            "</style>",
            "",
            "<script id=\"w-js-animation-scroll\">",
            "   const animItems = document.querySelectorAll(\".w-anim-item\");",
            "   if (animItems.length > 0) {",
            "      window.addEventListener('scroll', animOnScroll);",
            "",
            "      function animOnScroll(params) {",
            "         for (let index = 0; index < animItems.length; index++) {",
            "            const animItem = animItems[index];",
            "            const animItemHeight = animItem.offsetHeight;",
            "            const animItemOffset = offset(animItem).top;",
            "            const animStart = 4;",
            "            let animItemPoint = window.innerHeight - animItemHeight / animStart;",
            "            if (animItemHeight > window.innerHeight) {",
            "               animItemPoint = window.innerHeight - window.innerHeight / animStart;",
            "            }",
            "            if ((pageYOffset > animItemOffset - animItemPoint) && pageYOffset < (animItemOffset + animItemHeight)) {",
            "               animItem.classList.add(\"w-active\");",
            "            } else {",
            "               if (!animItem.classList.contains('w-anim-no-hide')) {",
            "                  animItem.classList.remove(\"w-active\");",
            "               }",
            "            }",
            "         }",
            "      }",
            "",
            "      function offset(el) {",
            "         const rect = el.getBoundingClientRect(),",
            "            scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,",
            "            scrollTop = window.pageYOffset || document.documentElement.scrollTop;",
            "         return {",
            "            top: rect.top + scrollTop,",
            "            left: rect.left + scrollLeft",
            "         }",
            "      }",
            "      setTimeout(() => {",
            "         animOnScroll();",
            "      }, 300);",
            "   }",
            "</script>"
        ],
        "discription": "Анимация при появлении объекта в области видимости скролла",
        "group": "Анимаця",
        "dependence": "-",
        "status": true
    },
    "|js| Подключение скрипта плавного перехода до блока scroll smooth": {
        "prefix": "w-js-smooth-scroll-links",
        "body": [
            "<!-- Добавляем общему контейнеру с тегами a класс smooth-scroll -->",
            "",
            "<script id=\"w-js-smooth-scroll-links\">",
            "   document.querySelectorAll('.smooth-scroll a').forEach(anchor => {",
            "      anchor.addEventListener('click', function(e) {",
            "         e.preventDefault();",
            "         const targetId = this.getAttribute('href');",
            "         const targetPosition = document.querySelector(targetId).offsetTop;",
            "         const startPosition = window.pageYOffset;",
            "         const distance = targetPosition - startPosition;",
            "         const duration = 500; // время в мс",
            "         let start = null;",
            "",
            "         function step(timestamp) {",
            "            if (!start) start = timestamp;",
            "            const progress = timestamp - start;",
            "            const scrollY = startPosition + (distance * (progress / duration));",
            "            window.scrollTo(0, scrollY);",
            "            if (progress < duration) {",
            "               requestAnimationFrame(step);",
            "            } else {",
            "               window.scrollTo(0, targetPosition); // точная финальная позиция",
            "            }",
            "         }",
            "         requestAnimationFrame(step);",
            "      });",
            "   });",
            "</script>"
        ],
        "discription": "Делает плавный скролл до блока при нажатии на ссылку",
        "group": "Анимаця",
        "dependence": "-",
        "status": true
    },
    "|js| Подключение скрипта маки номера телефона": {
        "prefix": "w-js-form-mask-tel",
        "body": [
            "<!-- Добавляем input с телефоном класс w-tel -->",
            "",
            "<script id=\"w-js-form-mask-tel\">",
            "   document.addEventListener(\"DOMContentLoaded\", function() {",
            "      var phoneInputs = document.querySelectorAll('input.w-tel');",
            "",
            "      var getInputNumbersValue = function(input) {",
            "         // Возвращаем только цифры из введенного значения",
            "         return input.value.replace(/\\D/g, '');",
            "      }",
            "",
            "      var onPhonePaste = function(e) {",
            "         var input = e.target,",
            "            inputNumbersValue = getInputNumbersValue(input);",
            "         var pasted = e.clipboardData || window.clipboardData;",
            "         if (pasted) {",
            "            var pastedText = pasted.getData('Text');",
            "            if (/\\D/g.test(pastedText)) {",
            "               // При вставке некорректного символа оставляем только цифры",
            "               input.value = inputNumbersValue;",
            "               return;",
            "            }",
            "         }",
            "      }",
            "",
            "      var onPhoneInput = function(e) {",
            "         var input = e.target,",
            "            inputNumbersValue = getInputNumbersValue(input),",
            "            selectionStart = input.selectionStart,",
            "            formattedInputValue = \"\";",
            "",
            "         if (!inputNumbersValue) {",
            "            return input.value = \"\";",
            "         }",
            "",
            "         if (input.value.length != selectionStart) {",
            "            // Если редактируем не в конце поля",
            "            if (e.data && /\\D/g.test(e.data)) {",
            "               // Если вводим не числовой символ",
            "               input.value = inputNumbersValue;",
            "            }",
            "            return;",
            "         }",
            "",
            "         if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {",
            "            if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;",
            "            var firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";",
            "            formattedInputValue = input.value = firstSymbols + \" \";",
            "            if (inputNumbersValue.length > 1) {",
            "               formattedInputValue += '(' + inputNumbersValue.substring(1, 4);",
            "            }",
            "            if (inputNumbersValue.length >= 5) {",
            "               formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);",
            "            }",
            "            if (inputNumbersValue.length >= 8) {",
            "               formattedInputValue += '-' + inputNumbersValue.substring(7, 9);",
            "            }",
            "            if (inputNumbersValue.length >= 10) {",
            "               formattedInputValue += '-' + inputNumbersValue.substring(9, 11);",
            "            }",
            "         } else {",
            "            formattedInputValue = '+' + inputNumbersValue.substring(0, 16);",
            "         }",
            "         input.value = formattedInputValue;",
            "      }",
            "",
            "      var onPhoneKeyDown = function(e) {",
            "         // Удаление последнего символа очищает поле",
            "         var inputValue = e.target.value.replace(/\\D/g, '');",
            "         if (e.keyCode == 8 && inputValue.length == 1) {",
            "            e.target.value = \"\";",
            "         }",
            "      }",
            "",
            "      var onPhoneFocus = function(e) {",
            "         var input = e.target;",
            "         if (input.value === \"\") {",
            "            input.value = \"+7 \"; // Устанавливаем начальное значение",
            "            input.setSelectionRange(3, 3); // Устанавливаем курсор после +7",
            "         }",
            "      }",
            "",
            "      for (var phoneInput of phoneInputs) {",
            "         phoneInput.addEventListener('keydown', onPhoneKeyDown);",
            "         phoneInput.addEventListener('input', onPhoneInput, false);",
            "         phoneInput.addEventListener('paste', onPhonePaste, false);",
            "         phoneInput.addEventListener('focus', onPhoneFocus); // Добавляем обработчик focus",
            "      }",
            "   });",
            "</script>"
        ],
        "discription": "Добавляет маску для сотового телефона в форме",
        "group": "Маска",
        "dependence": "-",
        "status": true
    },
    "|css| Подключение стилей для битых изображений": {
        "prefix": "w-css-images-carsh",
        "body": [
            "<style id=\"w-css-images-carsh\">",
            "   img {",
            "      position: relative;",
            "      display: block;",
            "   }",
            "",
            "   img:after {",
            "      content: attr(alt) \" отсутствует :(\";",
            "      text-align: center;",
            "      display: flex;",
            "      flex-direction: row;",
            "      justify-content: center;",
            "      align-items: center;",
            "      position: absolute;",
            "      z-index: 2;",
            "      top: 0;",
            "      left: 0;",
            "      width: 100%;",
            "      height: 100%;",
            "      background-color: #e2e2e2;",
            "   }",
            "</style>"
        ],
        "discription": "Стилизует изображение, если оно не отображается",
        "group": "Технические",
        "dependence": "-",
        "status": true
    },
    "|js| Попап": {
        "prefix": "w-js-popup",
        "body": [
            "<script id=\"w-js-popup\">",
            "   const popup_open = document.querySelectorAll('[class*=\"_popup-open--\"]');",
            "   popup_open_click();",
            "   popup_close_esc();",
            "   // Открытие popup",
            "   function popup_open_click() {",
            "      if (popup_open.length > 0) {",
            "         for (let i = 0; i < popup_open.length; i++) {",
            "            popup_open[i].addEventListener('click', e => {",
            "               let elementClassName = popup_open[i].className",
            "               let elementClassNamePopup = elementClassName.indexOf(\"_popup-open--\");",
            "               let elementClassNameStart = elementClassName.indexOf(\"--\", elementClassNamePopup);",
            "               let elementClassNameEnd = elementClassName.indexOf(\" \", elementClassNameStart);",
            "               let namePopup;",
            "               if (elementClassNameEnd == -1) {",
            "                  namePopup = elementClassName.slice(elementClassNameStart + 2);",
            "               } else {",
            "                  namePopup = elementClassName.slice(elementClassNameStart + 2, elementClassNameEnd);",
            "               }",
            "               if (document.querySelector('.popup-wrapper._active_')) {",
            "                  document.querySelector('.popup-wrapper._active_').classList.remove('_active_');",
            "               }",
            "               document.querySelector('._popup--' + namePopup).classList.add('_active_');",
            "               document.body.classList.add('_lock_');",
            "               popup_close_cros(document.querySelector('._popup--' + namePopup));",
            "            });",
            "         };",
            "      };",
            "   }",
            "   // Закрытие popup по крестику",
            "   function popup_close_cros(popup_close) {",
            "      if (popup_close.querySelector('._popup-close')) {",
            "         popup_close.querySelector('._popup-close').addEventListener('click', e => {",
            "            popup_close.classList.remove('_active_');",
            "            if (document.querySelector('body._lock_')) {",
            "               document.querySelector('body').classList.remove('_lock_');",
            "            }",
            "         });",
            "      }",
            "   }",
            "   // Закрытие попапа по esc",
            "   function popup_close_esc() {",
            "      document.addEventListener('keyup', function(event) {",
            "         if (document.querySelector('.popup-wrapper._active_')) {",
            "            if (event.code == 'Escape') {",
            "               document.querySelector('.popup-wrapper._active_').classList.remove('_active_');",
            "               if (document.querySelector('body._lock_')) {",
            "                  document.querySelector('body').classList.remove('_lock_');",
            "               }",
            "            }",
            "         }",
            "      });",
            "   }",
            "   // Закрытие модального окна при клике вне его",
            "   window.onclick = function(event) {",
            "      if (event.target === document.querySelector('.popup-wrapper')) {",
            "         document.querySelector('.popup-wrapper').classList.remove(\"_active_\");",
            "         if (document.querySelector('body._lock_')) {",
            "            document.querySelector('body').classList.remove('_lock_');",
            "         }",
            "      }",
            "   }",
            "</script>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "-",
        "status": true
    },
    "|css| Обнуление стилей": {
        "prefix": "w-style-zero",
        "body": [
            "<style id=\"w-css-zero\">",
            "   @import url(\"https://fonts.googleapis.com/css?family=Ubuntu:300,300italic,regular,italic,500,500italic,700,700italic=swap&subset=cyrillic-ext\");",
            "",
            "   :root {",
            "      --font-family-main: \"ubuntu\";",
            "      --font-size: 16px;",
            "      --font-color: #000000;",
            "      --font-line-height: 1.55;",
            "      --font-weight: 300;",
            "   }",
            "",
            "   *,",
            "   *::before,",
            "   *::after {",
            "      margin: 0;",
            "      padding: 0;",
            "      border: 0;",
            "      box-sizing: border-box;",
            "   }",
            "",
            "   a {",
            "      text-decoration: none;",
            "      color: inherit;",
            "      font-family: inherit;",
            "      font-weight: inherit",
            "   }",
            "",
            "   ul,",
            "   ol,",
            "   li {",
            "      list-style: none;",
            "   }",
            "",
            "   img {",
            "      vertical-align: top;",
            "   }",
            "",
            "   h1,",
            "   h2,",
            "   h3,",
            "   h4,",
            "   h5,",
            "   h6 {",
            "      font-weight: inherit;",
            "      font-size: inherit;",
            "   }",
            "",
            "   html,",
            "   body {",
            "      height: 100%;",
            "      line-height: var(--font-line-height);",
            "      font-size: var(--font-size);",
            "      color: var(--font-color);",
            "      font-family: var(--font-family-main);",
            "      font-weight: var(--font-line-weight);",
            "   }",
            "",
            "   .wrapper {",
            "      min-height: 100%;",
            "      overflow: hidden;",
            "      display: flex;",
            "      flex-direction: column;",
            "   }",
            "",
            "   main {",
            "      flex: 1 1 auto;",
            "   }",
            "",
            "   body ._lock {",
            "      overflow: hidden;",
            "   }",
            "",
            "   .w-container {",
            "      position: relative;",
            "      max-width: 1200px;",
            "      margin: 0 auto;",
            "      padding: 0 15px;",
            "   }",
            "</style>"
        ],
        "discription": "Обнуляющий стиль",
        "group": "Стандартные",
        "dependence": "-",
        "status": true,
        "key": "|css| Обнуление стилей"
    },
    "|js| Подключение скрипта для бургера и меню шапки": {
        "prefix": "w-js-header-burger",
        "body": [
            "<script id=\"w-header-burger-js\">",
            "   const headerBurger = document.querySelector('.w-header-burger');",
            "   const headerMenuMobileCross = document.querySelector('.w-header-mobile .w-close');",
            "   const headerMenuMobile = document.querySelector('.w-header-mobile');",
            "   if (headerBurger) {",
            "      headerBurger.addEventListener(\"click\", function(e) {",
            "         headerBurger.classList.toggle('w-active');",
            "         headerMenuMobile.classList.toggle('w-active');",
            "         document.querySelector('body').classList.toggle('w_lock');",
            "      });",
            "      if (headerMenuMobileCross) {",
            "         headerMenuMobileCross.addEventListener('click', () => {",
            "            headerBurger.classList.remove('w-active');",
            "            headerMenuMobile.classList.remove('w-active');",
            "         });",
            "      }",
            "   }",
            "</script>"
        ],
        "discription": "Подключение скрипта для работы бургера",
        "group": "Зависимые",
        "dependence": "-",
        "status": true
    },
    "|css| Подключение стилей для адаптации шапки": {
        "prefix": "w-css-header-burger-adapt",
        "body": [
            "<style id=\"w-header-burger-css-adapt\">",
            "   @media (min-width: 0px) {",
            "",
            "      .w-header-burger,",
            "      .w-header-mobile {",
            "         display: flex;",
            "      }",
            "",
            "      .w-header-desktop {",
            "         display: none;",
            "      }",
            "   }",
            "",
            "   @media (min-width: 480px) {}",
            "",
            "   @media (min-width: 768px) {}",
            "",
            "   @media (min-width: 992px) {",
            "",
            "      .w-header-burger,",
            "      .w-header-mobile {",
            "         display: none;",
            "      }",
            "",
            "      .w-header-desktop {",
            "         display: block;",
            "      }",
            "   }",
            "</style>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "-",
        "status": false
    },
    "|js| Spoiler": {
        "prefix": "w-js-spoillers",
        "body": [
            "<script id=\"w-js-spoillers\">",
            "   //получение обычных спойлеров",
            "   let spollerArray = document.querySelectorAll('[data-spollers]');",
            "   if (spollerArray.length > 0) {",
            "      const spollerRegular = Array.from(spollerArray).filter(function(item, index, self) {",
            "         return !item.dataset.spollers.split(\",\")[0];",
            "      });",
            "      //Инициализация обычных спойлеров",
            "      if (spollerRegular.length > 0) {",
            "         initSpollers(spollerRegular);",
            "      }",
            "      //Получение спойлеров с медиа запросом",
            "      const spollerMedia = Array.from(spollerArray).filter(function(item, index, self) {",
            "         return item.dataset.spollers.split(\",\")[0];",
            "      });",
            "      //Инициализация спойлеров с медиа запросом",
            "      if (spollerMedia.length > 0) {",
            "         const breakepointsArray = [];",
            "         spollerMedia.forEach(item => {",
            "            const params = item.dataset.spollers;",
            "            const breakpoint = {};",
            "            const paramsArray = params.split(\",\");",
            "            breakpoint.value = paramsArray[0];",
            "            breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : \"max\";",
            "            breakpoint.item = item;",
            "            breakepointsArray.push(breakpoint);",
            "         });",
            "         let mediaQueris = breakepointsArray.map(function(item) {",
            "            return '(' + item.type + '-width: ' + item.value + 'px),' + item.value + ',' + item.type;",
            "         });",
            "         mediaQueris = mediaQueris.filter(function(item, index, self) {",
            "            return self.indexOf(item) === index;",
            "         });",
            "         //работа с каждым брейкпоинтом",
            "         mediaQueris.forEach(breakpoint => {",
            "            const paramsArray = breakpoint.split(\",\");",
            "            const mediaBreakpoint = paramsArray[1];",
            "            const mediaType = paramsArray[2];",
            "            const matchMedia = window.matchMedia(paramsArray[0]);",
            "            //объекты с нужными условиями",
            "            const spollersArray = breakepointsArray.filter(function(item) {",
            "               if (item.value === mediaBreakpoint && item.type === mediaType) {",
            "                  return true;",
            "               }",
            "            });",
            "            // событие",
            "            matchMedia.addListener(function() {",
            "               initSpollers(spollersArray, matchMedia);",
            "            });",
            "            initSpollers(spollersArray, matchMedia);",
            "         });",
            "      }",
            "      //инициация",
            "      function initSpollers(spollersArray, matchMedia = false) {",
            "         spollersArray.forEach(spollersBlock => {",
            "            spollersBlock = matchMedia ? spollersBlock.item : spollersBlock;",
            "            if (matchMedia.matches || !matchMedia) {",
            "               spollersBlock.classList.add('_init');",
            "               initSpollersBody(spollersBlock);",
            "               spollersBlock.addEventListener('click', setSpollerAction);",
            "            } else {",
            "               spollersBlock.classList.remove('_init');",
            "               initSpollersBody(spollersBlock, false);",
            "               spollersBlock.removeEventListener(\"click\", setSpollerAction);",
            "            }",
            "         });",
            "      }",
            "      //работа с контентом",
            "      function initSpollersBody(spollersBlock, hideSpollerBody = true) {",
            "         const spollerTitels = spollersBlock.querySelectorAll('[data-spoller]');",
            "         if (spollerTitels.length > 0) {",
            "            spollerTitels.forEach(spollerTitel => {",
            "               if (hideSpollerBody) {",
            "                  spollerTitel.removeAttribute('tabindex');",
            "                  if (!spollerTitel.classList.contains('._spoller-active')) {",
            "                     spollerTitel.nextElementSibling.hidden = true;",
            "                  }",
            "               } else {",
            "                  spollerTitel.setAttribute('tabindex', '-1');",
            "                  spollerTitel.nextElementSibling.hidden = false;",
            "               }",
            "            });",
            "         }",
            "      }",
            "",
            "      function setSpollerAction(e) {",
            "         const el = e.target;",
            "         if (el.hasAttribute('data-spoller') || el.closest('[data-spoller]')) {",
            "            const spollerTitel = el.hasAttribute('data-spoller') ? el : el.closest('[data-spoller]');",
            "            const spollersBlock = spollerTitel.closest('[data-spollers]');",
            "            const oneSpoller = spollersBlock.hasAttribute('data-one-spoller') ? true : false;",
            "            if (!spollersBlock.querySelectorAll('._slide').length) {",
            "               if (oneSpoller && !spollerTitel.classList.contains('_spoller-active')) {",
            "                  hideSpollerBody(spollersBlock);",
            "               }",
            "               spollerTitel.classList.toggle('_spoller-active');",
            "               _slideToggle(spollerTitel.nextElementSibling, 500);",
            "            }",
            "            e.preventDefault();",
            "         }",
            "      }",
            "",
            "      function hideSpollerBody(spollersBlock) {",
            "         const SpollerActiveTitle = spollersBlock.querySelector('[data-spoller]._spoller-active');",
            "         if (SpollerActiveTitle) {",
            "            SpollerActiveTitle.classList.remove('_spoller-active');",
            "            _slideUp(SpollerActiveTitle.nextElementSibling, 500);",
            "         }",
            "      }",
            "   }",
            "   //slideToggle",
            "   let _slideUp = (target, duration = 500) => {",
            "      if (!target.classList.contains('_slide')) {",
            "         target.classList.add('_slide');",
            "         target.style.transitionProperty = 'height, margin, padding';",
            "         target.style.transitionDuration = duration + 'ms';",
            "         target.style.height = target.offsetHeight + 'px';",
            "         target.offsetHeight;",
            "         target.style.overflow = 'hidden';",
            "         target.style.height = 0;",
            "         target.style.paddingTop = 0;",
            "         target.style.paddingBottom = 0;",
            "         target.style.marginTop = 0;",
            "         target.style.marginBottom = 0;",
            "         window.setTimeout(() => {",
            "            target.hidden = true;",
            "            target.style.removeProperty('height');",
            "            target.style.removeProperty('padding-top');",
            "            target.style.removeProperty('padding-bottom');",
            "            target.style.removeProperty('margin-tom');",
            "            target.style.removeProperty('margin-bottom');",
            "            // target.style.removeProperty('display');",
            "            target.style.removeProperty('overflow');",
            "            target.style.removeProperty('transition-duration');",
            "            target.style.removeProperty('transition-property');",
            "            target.classList.remove('_slide');",
            "            target.style.removeProperty('display');",
            "         }, duration);",
            "      }",
            "   }",
            "   let _slideDown = (target, duration = 500) => {",
            "      target.style.display = 'flex';",
            "      if (!target.classList.contains('_slide')) {",
            "         target.classList.add('_slide');",
            "         if (target.hidden) {",
            "            target.hidden = false;",
            "         }",
            "         let height = target.offsetHeight;",
            "         target.style.overflow = 'hidden';",
            "         target.style.height = 0;",
            "         target.style.paddingTop = 0;",
            "         target.style.paddingBottom = 0;",
            "         target.style.marginTop = 0;",
            "         target.style.marginBottom = 0;",
            "         target.offsetHeight;",
            "         target.style.transitionProperty = 'height, margin, padding';",
            "         target.style.transitionDuration = duration + 'ms';",
            "         target.style.height = height + 'px';",
            "         target.style.removeProperty('padding-top');",
            "         target.style.removeProperty('padding-bottom');",
            "         target.style.removeProperty('margin-tom');",
            "         target.style.removeProperty('margin-bottom');",
            "         // target.style.removeProperty('display');",
            "         window.setTimeout(() => {",
            "            target.style.removeProperty('height');",
            "            target.style.removeProperty('overflow');",
            "            target.style.removeProperty('transition-duration');",
            "            target.style.removeProperty('transition-property');",
            "            target.classList.remove('_slide');",
            "         }, duration);",
            "      }",
            "   }",
            "   let _slideToggle = (target, duration = 500) => {",
            "      if (target.hidden) {",
            "         return _slideDown(target, duration);",
            "      } else {",
            "         return _slideUp(target, duration);",
            "      }",
            "   }",
            "",
            "   function observeNewSpollers() {",
            "      const observer = new MutationObserver(mutations => {",
            "         mutations.forEach(mutation => {",
            "            mutation.addedNodes.forEach(node => {",
            "               if (node.nodeType === 1 && node.matches('[data-spollers]')) {",
            "                  initSpollers([node]); // Запускаем инициализацию",
            "               }",
            "            });",
            "         });",
            "      });",
            "",
            "      observer.observe(document.body, {",
            "         childList: true,",
            "         subtree: true",
            "      });",
            "   }",
            "",
            "   // Вызываем наблюдатель",
            "   observeNewSpollers();",
            "</script>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "-",
        "status": false
    },
    "|js| До | После": {
        "prefix": "w-js-twentytwenty",
        "body": [
            "<script id=\"w-js-twentytwenty\">",
            "   (function($) {",
            "",
            "      $.fn.twentytwenty = function(options) {",
            "         var options = $.extend({",
            "            default_offset_pct: 0.5,",
            "            orientation: 'horizontal',",
            "            before_label: 'Before',",
            "            after_label: 'After',",
            "            no_overlay: false,",
            "            move_slider_on_hover: false,",
            "            move_with_handle_only: true,",
            "            click_to_move: false",
            "         }, options);",
            "",
            "         return this.each(function() {",
            "",
            "            var sliderPct = options.default_offset_pct;",
            "            var container = $(this);",
            "            var sliderOrientation = options.orientation;",
            "            var beforeDirection = (sliderOrientation === 'vertical') ? 'down' : 'left';",
            "            var afterDirection = (sliderOrientation === 'vertical') ? 'up' : 'right';",
            "",
            "",
            "            container.wrap(\"<div class='twentytwenty-wrapper twentytwenty-\" + sliderOrientation + \"'></div>\");",
            "            if (!options.no_overlay) {",
            "               container.append(\"<div class='twentytwenty-overlay'></div>\");",
            "               var overlay = container.find(\".twentytwenty-overlay\");",
            "               overlay.append(\"<div class='twentytwenty-before-label' data-content='\" + options.before_label + \"'></div>\");",
            "               overlay.append(\"<div class='twentytwenty-after-label' data-content='\" + options.after_label + \"'></div>\");",
            "            }",
            "            var beforeImg = container.find(\"img:first\");",
            "            var afterImg = container.find(\"img:last\");",
            "            container.append(\"<div class='twentytwenty-handle'></div>\");",
            "            var slider = container.find(\".twentytwenty-handle\");",
            "            slider.append(\"<span class='twentytwenty-\" + beforeDirection + \"-arrow'></span>\");",
            "            slider.append(\"<span class='twentytwenty-\" + afterDirection + \"-arrow'></span>\");",
            "            container.addClass(\"twentytwenty-container\");",
            "            beforeImg.addClass(\"twentytwenty-before\");",
            "            afterImg.addClass(\"twentytwenty-after\");",
            "",
            "            var calcOffset = function(dimensionPct) {",
            "               var w = beforeImg.width();",
            "               var h = beforeImg.height();",
            "               return {",
            "                  w: w + \"px\",",
            "                  h: h + \"px\",",
            "                  cw: (dimensionPct * w) + \"px\",",
            "                  ch: (dimensionPct * h) + \"px\"",
            "               };",
            "            };",
            "",
            "            var adjustContainer = function(offset) {",
            "               if (sliderOrientation === 'vertical') {",
            "                  beforeImg.css(\"clip\", \"rect(0,\" + offset.w + \",\" + offset.ch + \",0)\");",
            "                  afterImg.css(\"clip\", \"rect(\" + offset.ch + \",\" + offset.w + \",\" + offset.h + \",0)\");",
            "               } else {",
            "                  beforeImg.css(\"clip\", \"rect(0,\" + offset.cw + \",\" + offset.h + \",0)\");",
            "                  afterImg.css(\"clip\", \"rect(0,\" + offset.w + \",\" + offset.h + \",\" + offset.cw + \")\");",
            "               }",
            "               container.css(\"height\", offset.h);",
            "            };",
            "",
            "            var adjustSlider = function(pct) {",
            "               var offset = calcOffset(pct);",
            "               slider.css((sliderOrientation === \"vertical\") ? \"top\" : \"left\", (sliderOrientation === \"vertical\") ? offset.ch : offset.cw);",
            "               adjustContainer(offset);",
            "            };",
            "",
            "            // Return the number specified or the min/max number if it outside the range given.",
            "            var minMaxNumber = function(num, min, max) {",
            "               return Math.max(min, Math.min(max, num));",
            "            };",
            "",
            "            // Calculate the slider percentage based on the position.",
            "            var getSliderPercentage = function(positionX, positionY) {",
            "               var sliderPercentage = (sliderOrientation === 'vertical') ?",
            "                  (positionY - offsetY) / imgHeight :",
            "                  (positionX - offsetX) / imgWidth;",
            "",
            "               return minMaxNumber(sliderPercentage, 0, 1);",
            "            };",
            "",
            "",
            "            $(window).on(\"resize.twentytwenty\", function(e) {",
            "               adjustSlider(sliderPct);",
            "            });",
            "",
            "            var offsetX = 0;",
            "            var offsetY = 0;",
            "            var imgWidth = 0;",
            "            var imgHeight = 0;",
            "            var onMoveStart = function(e) {",
            "               if (((e.distX > e.distY && e.distX < -e.distY) || (e.distX < e.distY && e.distX > -e.distY)) && sliderOrientation !== 'vertical') {",
            "                  e.preventDefault();",
            "               } else if (((e.distX < e.distY && e.distX < -e.distY) || (e.distX > e.distY && e.distX > -e.distY)) && sliderOrientation === 'vertical') {",
            "                  e.preventDefault();",
            "               }",
            "               container.addClass(\"active\");",
            "               offsetX = container.offset().left;",
            "               offsetY = container.offset().top;",
            "               imgWidth = beforeImg.width();",
            "               imgHeight = beforeImg.height();",
            "            };",
            "            var onMove = function(e) {",
            "               if (container.hasClass(\"active\")) {",
            "                  sliderPct = getSliderPercentage(e.pageX, e.pageY);",
            "                  adjustSlider(sliderPct);",
            "               }",
            "            };",
            "            var onMoveEnd = function() {",
            "               container.removeClass(\"active\");",
            "            };",
            "",
            "            var moveTarget = options.move_with_handle_only ? slider : container;",
            "            moveTarget.on(\"movestart\", onMoveStart);",
            "            moveTarget.on(\"move\", onMove);",
            "            moveTarget.on(\"moveend\", onMoveEnd);",
            "",
            "            if (options.move_slider_on_hover) {",
            "               container.on(\"mouseenter\", onMoveStart);",
            "               container.on(\"mousemove\", onMove);",
            "               container.on(\"mouseleave\", onMoveEnd);",
            "            }",
            "",
            "            slider.on(\"touchmove\", function(e) {",
            "               e.preventDefault();",
            "            });",
            "",
            "            container.find(\"img\").on(\"mousedown\", function(event) {",
            "               event.preventDefault();",
            "            });",
            "",
            "            if (options.click_to_move) {",
            "               container.on('click', function(e) {",
            "                  offsetX = container.offset().left;",
            "                  offsetY = container.offset().top;",
            "                  imgWidth = beforeImg.width();",
            "                  imgHeight = beforeImg.height();",
            "",
            "                  sliderPct = getSliderPercentage(e.pageX, e.pageY);",
            "                  adjustSlider(sliderPct);",
            "               });",
            "            }",
            "",
            "            $(window).trigger(\"resize.twentytwenty\");",
            "         });",
            "      };",
            "",
            "   })(jQuery);",
            "",
            "   // DOM.event.move",
            "   //",
            "   // 2.0.0",
            "   //",
            "   // Stephen Band",
            "   //",
            "   // Triggers 'movestart', 'move' and 'moveend' events after",
            "   // mousemoves following a mousedown cross a distance threshold,",
            "   // similar to the native 'dragstart', 'drag' and 'dragend' events.",
            "   // Move events are throttled to animation frames. Move event objects",
            "   // have the properties:",
            "   //",
            "   // pageX:",
            "   // pageY:     Page coordinates of pointer.",
            "   // startX:",
            "   // startY:    Page coordinates of pointer at movestart.",
            "   // distX:",
            "   // distY:     Distance the pointer has moved since movestart.",
            "   // deltaX:",
            "   // deltaY:    Distance the finger has moved since last event.",
            "   // velocityX:",
            "   // velocityY: Average velocity over last few events.",
            "",
            "",
            "   (function(fn) {",
            "      if (typeof define === 'function' && define.amd) {",
            "         define([], fn);",
            "      } else if ((typeof module !== \"undefined\" && module !== null) && module.exports) {",
            "         module.exports = fn;",
            "      } else {",
            "         fn();",
            "      }",
            "   })(function() {",
            "      var assign = Object.assign || window.jQuery && jQuery.extend;",
            "",
            "      // Number of pixels a pressed pointer travels before movestart",
            "      // event is fired.",
            "      var threshold = 8;",
            "",
            "      // Shim for requestAnimationFrame, falling back to timer. See:",
            "      // see http://paulirish.com/2011/requestanimationframe-for-smart-animating/",
            "      var requestFrame = (function() {",
            "         return (",
            "            window.requestAnimationFrame ||",
            "            window.webkitRequestAnimationFrame ||",
            "            window.mozRequestAnimationFrame ||",
            "            window.oRequestAnimationFrame ||",
            "            window.msRequestAnimationFrame ||",
            "            function(fn, element) {",
            "               return window.setTimeout(function() {",
            "                  fn();",
            "               }, 25);",
            "            }",
            "         );",
            "      })();",
            "",
            "      // Shim for customEvent",
            "      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill",
            "      (function() {",
            "         if (typeof window.CustomEvent === \"function\") return false;",
            "",
            "         function CustomEvent(event, params) {",
            "            params = params || {",
            "               bubbles: false,",
            "               cancelable: false,",
            "               detail: undefined",
            "            };",
            "            var evt = document.createEvent('CustomEvent');",
            "            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);",
            "            return evt;",
            "         }",
            "",
            "         CustomEvent.prototype = window.Event.prototype;",
            "         window.CustomEvent = CustomEvent;",
            "      })();",
            "",
            "      var ignoreTags = {",
            "         textarea: true,",
            "         input: true,",
            "         select: true,",
            "         button: true",
            "      };",
            "",
            "      var mouseevents = {",
            "         move: 'mousemove',",
            "         cancel: 'mouseup dragstart',",
            "         end: 'mouseup'",
            "      };",
            "",
            "      var touchevents = {",
            "         move: 'touchmove',",
            "         cancel: 'touchend',",
            "         end: 'touchend'",
            "      };",
            "",
            "      var rspaces = /\\s+/;",
            "",
            "",
            "      // DOM Events",
            "",
            "      var eventOptions = {",
            "         bubbles: true,",
            "         cancelable: true",
            "      };",
            "",
            "      var eventsSymbol = typeof Symbol === \"function\" ? Symbol('events') : {};",
            "",
            "      function createEvent(type) {",
            "         return new CustomEvent(type, eventOptions);",
            "      }",
            "",
            "      function getEvents(node) {",
            "         return node[eventsSymbol] || (node[eventsSymbol] = {});",
            "      }",
            "",
            "      function on(node, types, fn, data, selector) {",
            "         types = types.split(rspaces);",
            "",
            "         var events = getEvents(node);",
            "         var i = types.length;",
            "         var handlers, type;",
            "",
            "         function handler(e) {",
            "            fn(e, data);",
            "         }",
            "",
            "         while (i--) {",
            "            type = types[i];",
            "            handlers = events[type] || (events[type] = []);",
            "            handlers.push([fn, handler]);",
            "            node.addEventListener(type, handler);",
            "         }",
            "      }",
            "",
            "      function off(node, types, fn, selector) {",
            "         types = types.split(rspaces);",
            "",
            "         var events = getEvents(node);",
            "         var i = types.length;",
            "         var type, handlers, k;",
            "",
            "         if (!events) {",
            "            return;",
            "         }",
            "",
            "         while (i--) {",
            "            type = types[i];",
            "            handlers = events[type];",
            "            if (!handlers) {",
            "               continue;",
            "            }",
            "            k = handlers.length;",
            "            while (k--) {",
            "               if (handlers[k][0] === fn) {",
            "                  node.removeEventListener(type, handlers[k][1]);",
            "                  handlers.splice(k, 1);",
            "               }",
            "            }",
            "         }",
            "      }",
            "",
            "      function trigger(node, type, properties) {",
            "         // Don't cache events. It prevents you from triggering an event of a",
            "         // given type from inside the handler of another event of that type.",
            "         var event = createEvent(type);",
            "         if (properties) {",
            "            assign(event, properties);",
            "         }",
            "         node.dispatchEvent(event);",
            "      }",
            "",
            "",
            "      // Constructors",
            "",
            "      function Timer(fn) {",
            "         var callback = fn,",
            "            active = false,",
            "            running = false;",
            "",
            "         function trigger(time) {",
            "            if (active) {",
            "               callback();",
            "               requestFrame(trigger);",
            "               running = true;",
            "               active = false;",
            "            } else {",
            "               running = false;",
            "            }",
            "         }",
            "",
            "         this.kick = function(fn) {",
            "            active = true;",
            "            if (!running) {",
            "               trigger();",
            "            }",
            "         };",
            "",
            "         this.end = function(fn) {",
            "            var cb = callback;",
            "",
            "            if (!fn) {",
            "               return;",
            "            }",
            "",
            "            // If the timer is not running, simply call the end callback.",
            "            if (!running) {",
            "               fn();",
            "            }",
            "            // If the timer is running, and has been kicked lately, then",
            "            // queue up the current callback and the end callback, otherwise",
            "            // just the end callback.",
            "            else {",
            "               callback = active ?",
            "                  function() {",
            "                     cb();",
            "                     fn();",
            "                  } :",
            "                  fn;",
            "",
            "               active = true;",
            "            }",
            "         };",
            "      }",
            "",
            "",
            "      // Functions",
            "",
            "      function noop() {}",
            "",
            "      function preventDefault(e) {",
            "         e.preventDefault();",
            "      }",
            "",
            "      function isIgnoreTag(e) {",
            "         return !!ignoreTags[e.target.tagName.toLowerCase()];",
            "      }",
            "",
            "      function isPrimaryButton(e) {",
            "         // Ignore mousedowns on any button other than the left (or primary)",
            "         // mouse button, or when a modifier key is pressed.",
            "         return (e.which === 1 && !e.ctrlKey && !e.altKey);",
            "      }",
            "",
            "      function identifiedTouch(touchList, id) {",
            "         var i, l;",
            "",
            "         if (touchList.identifiedTouch) {",
            "            return touchList.identifiedTouch(id);",
            "         }",
            "",
            "         // touchList.identifiedTouch() does not exist in",
            "         // webkit yet… we must do the search ourselves...",
            "",
            "         i = -1;",
            "         l = touchList.length;",
            "",
            "         while (++i < l) {",
            "            if (touchList[i].identifier === id) {",
            "               return touchList[i];",
            "            }",
            "         }",
            "      }",
            "",
            "      function changedTouch(e, data) {",
            "         var touch = identifiedTouch(e.changedTouches, data.identifier);",
            "",
            "         // This isn't the touch you're looking for.",
            "         if (!touch) {",
            "            return;",
            "         }",
            "",
            "         // Chrome Android (at least) includes touches that have not",
            "         // changed in e.changedTouches. That's a bit annoying. Check",
            "         // that this touch has changed.",
            "         if (touch.pageX === data.pageX && touch.pageY === data.pageY) {",
            "            return;",
            "         }",
            "",
            "         return touch;",
            "      }",
            "",
            "",
            "      // Handlers that decide when the first movestart is triggered",
            "",
            "      function mousedown(e) {",
            "         // Ignore non-primary buttons",
            "         if (!isPrimaryButton(e)) {",
            "            return;",
            "         }",
            "",
            "         // Ignore form and interactive elements",
            "         if (isIgnoreTag(e)) {",
            "            return;",
            "         }",
            "",
            "         on(document, mouseevents.move, mousemove, e);",
            "         on(document, mouseevents.cancel, mouseend, e);",
            "      }",
            "",
            "      function mousemove(e, data) {",
            "         checkThreshold(e, data, e, removeMouse);",
            "      }",
            "",
            "      function mouseend(e, data) {",
            "         removeMouse();",
            "      }",
            "",
            "      function removeMouse() {",
            "         off(document, mouseevents.move, mousemove);",
            "         off(document, mouseevents.cancel, mouseend);",
            "      }",
            "",
            "      function touchstart(e) {",
            "         // Don't get in the way of interaction with form elements",
            "         if (ignoreTags[e.target.tagName.toLowerCase()]) {",
            "            return;",
            "         }",
            "",
            "         var touch = e.changedTouches[0];",
            "",
            "         // iOS live updates the touch objects whereas Android gives us copies.",
            "         // That means we can't trust the touchstart object to stay the same,",
            "         // so we must copy the data. This object acts as a template for",
            "         // movestart, move and moveend event objects.",
            "         var data = {",
            "            target: touch.target,",
            "            pageX: touch.pageX,",
            "            pageY: touch.pageY,",
            "            identifier: touch.identifier,",
            "",
            "            // The only way to make handlers individually unbindable is by",
            "            // making them unique.",
            "            touchmove: function(e, data) {",
            "               touchmove(e, data);",
            "            },",
            "            touchend: function(e, data) {",
            "               touchend(e, data);",
            "            }",
            "         };",
            "",
            "         on(document, touchevents.move, data.touchmove, data);",
            "         on(document, touchevents.cancel, data.touchend, data);",
            "      }",
            "",
            "      function touchmove(e, data) {",
            "         var touch = changedTouch(e, data);",
            "         if (!touch) {",
            "            return;",
            "         }",
            "         checkThreshold(e, data, touch, removeTouch);",
            "      }",
            "",
            "      function touchend(e, data) {",
            "         var touch = identifiedTouch(e.changedTouches, data.identifier);",
            "         if (!touch) {",
            "            return;",
            "         }",
            "         removeTouch(data);",
            "      }",
            "",
            "      function removeTouch(data) {",
            "         off(document, touchevents.move, data.touchmove);",
            "         off(document, touchevents.cancel, data.touchend);",
            "      }",
            "",
            "      function checkThreshold(e, data, touch, fn) {",
            "         var distX = touch.pageX - data.pageX;",
            "         var distY = touch.pageY - data.pageY;",
            "",
            "         // Do nothing if the threshold has not been crossed.",
            "         if ((distX * distX) + (distY * distY) < (threshold * threshold)) {",
            "            return;",
            "         }",
            "",
            "         triggerStart(e, data, touch, distX, distY, fn);",
            "      }",
            "",
            "      function triggerStart(e, data, touch, distX, distY, fn) {",
            "         var touches = e.targetTouches;",
            "         var time = e.timeStamp - data.timeStamp;",
            "",
            "         // Create a movestart object with some special properties that",
            "         // are passed only to the movestart handlers.",
            "         var template = {",
            "            altKey: e.altKey,",
            "            ctrlKey: e.ctrlKey,",
            "            shiftKey: e.shiftKey,",
            "            startX: data.pageX,",
            "            startY: data.pageY,",
            "            distX: distX,",
            "            distY: distY,",
            "            deltaX: distX,",
            "            deltaY: distY,",
            "            pageX: touch.pageX,",
            "            pageY: touch.pageY,",
            "            velocityX: distX / time,",
            "            velocityY: distY / time,",
            "            identifier: data.identifier,",
            "            targetTouches: touches,",
            "            finger: touches ? touches.length : 1,",
            "            enableMove: function() {",
            "               this.moveEnabled = true;",
            "               this.enableMove = noop;",
            "               e.preventDefault();",
            "            }",
            "         };",
            "",
            "         // Trigger the movestart event.",
            "         trigger(data.target, 'movestart', template);",
            "",
            "         // Unbind handlers that tracked the touch or mouse up till now.",
            "         fn(data);",
            "      }",
            "",
            "",
            "      // Handlers that control what happens following a movestart",
            "",
            "      function activeMousemove(e, data) {",
            "         var timer = data.timer;",
            "",
            "         data.touch = e;",
            "         data.timeStamp = e.timeStamp;",
            "         timer.kick();",
            "      }",
            "",
            "      function activeMouseend(e, data) {",
            "         var target = data.target;",
            "         var event = data.event;",
            "         var timer = data.timer;",
            "",
            "         removeActiveMouse();",
            "",
            "         endEvent(target, event, timer, function() {",
            "            // Unbind the click suppressor, waiting until after mouseup",
            "            // has been handled.",
            "            setTimeout(function() {",
            "               off(target, 'click', preventDefault);",
            "            }, 0);",
            "         });",
            "      }",
            "",
            "      function removeActiveMouse() {",
            "         off(document, mouseevents.move, activeMousemove);",
            "         off(document, mouseevents.end, activeMouseend);",
            "      }",
            "",
            "      function activeTouchmove(e, data) {",
            "         var event = data.event;",
            "         var timer = data.timer;",
            "         var touch = changedTouch(e, event);",
            "",
            "         if (!touch) {",
            "            return;",
            "         }",
            "",
            "         // Stop the interface from gesturing",
            "         e.preventDefault();",
            "",
            "         event.targetTouches = e.targetTouches;",
            "         data.touch = touch;",
            "         data.timeStamp = e.timeStamp;",
            "",
            "         timer.kick();",
            "      }",
            "",
            "      function activeTouchend(e, data) {",
            "         var target = data.target;",
            "         var event = data.event;",
            "         var timer = data.timer;",
            "         var touch = identifiedTouch(e.changedTouches, event.identifier);",
            "",
            "         // This isn't the touch you're looking for.",
            "         if (!touch) {",
            "            return;",
            "         }",
            "",
            "         removeActiveTouch(data);",
            "         endEvent(target, event, timer);",
            "      }",
            "",
            "      function removeActiveTouch(data) {",
            "         off(document, touchevents.move, data.activeTouchmove);",
            "         off(document, touchevents.end, data.activeTouchend);",
            "      }",
            "",
            "",
            "      // Logic for triggering move and moveend events",
            "",
            "      function updateEvent(event, touch, timeStamp) {",
            "         var time = timeStamp - event.timeStamp;",
            "",
            "         event.distX = touch.pageX - event.startX;",
            "         event.distY = touch.pageY - event.startY;",
            "         event.deltaX = touch.pageX - event.pageX;",
            "         event.deltaY = touch.pageY - event.pageY;",
            "",
            "         // Average the velocity of the last few events using a decay",
            "         // curve to even out spurious jumps in values.",
            "         event.velocityX = 0.3 * event.velocityX + 0.7 * event.deltaX / time;",
            "         event.velocityY = 0.3 * event.velocityY + 0.7 * event.deltaY / time;",
            "         event.pageX = touch.pageX;",
            "         event.pageY = touch.pageY;",
            "      }",
            "",
            "      function endEvent(target, event, timer, fn) {",
            "         timer.end(function() {",
            "            trigger(target, 'moveend', event);",
            "            return fn && fn();",
            "         });",
            "      }",
            "",
            "",
            "      // Set up the DOM",
            "",
            "      function movestart(e) {",
            "         if (e.defaultPrevented) {",
            "            return;",
            "         }",
            "         if (!e.moveEnabled) {",
            "            return;",
            "         }",
            "",
            "         var event = {",
            "            startX: e.startX,",
            "            startY: e.startY,",
            "            pageX: e.pageX,",
            "            pageY: e.pageY,",
            "            distX: e.distX,",
            "            distY: e.distY,",
            "            deltaX: e.deltaX,",
            "            deltaY: e.deltaY,",
            "            velocityX: e.velocityX,",
            "            velocityY: e.velocityY,",
            "            identifier: e.identifier,",
            "            targetTouches: e.targetTouches,",
            "            finger: e.finger",
            "         };",
            "",
            "         var data = {",
            "            target: e.target,",
            "            event: event,",
            "            timer: new Timer(update),",
            "            touch: undefined,",
            "            timeStamp: e.timeStamp",
            "         };",
            "",
            "         function update(time) {",
            "            updateEvent(event, data.touch, data.timeStamp);",
            "            trigger(data.target, 'move', event);",
            "         }",
            "",
            "         if (e.identifier === undefined) {",
            "            // We're dealing with a mouse event.",
            "            // Stop clicks from propagating during a move",
            "            on(e.target, 'click', preventDefault);",
            "            on(document, mouseevents.move, activeMousemove, data);",
            "            on(document, mouseevents.end, activeMouseend, data);",
            "         } else {",
            "            // In order to unbind correct handlers they have to be unique",
            "            data.activeTouchmove = function(e, data) {",
            "               activeTouchmove(e, data);",
            "            };",
            "            data.activeTouchend = function(e, data) {",
            "               activeTouchend(e, data);",
            "            };",
            "",
            "            // We're dealing with a touch.",
            "            on(document, touchevents.move, data.activeTouchmove, data);",
            "            on(document, touchevents.end, data.activeTouchend, data);",
            "         }",
            "      }",
            "",
            "      on(document, 'mousedown', mousedown);",
            "      on(document, 'touchstart', touchstart);",
            "      on(document, 'movestart', movestart);",
            "",
            "",
            "      // jQuery special events",
            "      //",
            "      // jQuery event objects are copies of DOM event objects. They need",
            "      // a little help copying the move properties across.",
            "",
            "      if (!window.jQuery) {",
            "         return;",
            "      }",
            "",
            "      var properties = (\"startX startY pageX pageY distX distY deltaX deltaY velocityX velocityY\").split(' ');",
            "",
            "      function enableMove1(e) {",
            "         e.enableMove();",
            "      }",
            "",
            "      function enableMove2(e) {",
            "         e.enableMove();",
            "      }",
            "",
            "      function enableMove3(e) {",
            "         e.enableMove();",
            "      }",
            "",
            "      function add(handleObj) {",
            "         var handler = handleObj.handler;",
            "",
            "         handleObj.handler = function(e) {",
            "            // Copy move properties across from originalEvent",
            "            var i = properties.length;",
            "            var property;",
            "",
            "            while (i--) {",
            "               property = properties[i];",
            "               e[property] = e.originalEvent[property];",
            "            }",
            "",
            "            handler.apply(this, arguments);",
            "         };",
            "      }",
            "",
            "      jQuery.event.special.movestart = {",
            "         setup: function() {",
            "            // Movestart must be enabled to allow other move events",
            "            on(this, 'movestart', enableMove1);",
            "",
            "            // Do listen to DOM events",
            "            return false;",
            "         },",
            "",
            "         teardown: function() {",
            "            off(this, 'movestart', enableMove1);",
            "            return false;",
            "         },",
            "",
            "         add: add",
            "      };",
            "",
            "      jQuery.event.special.move = {",
            "         setup: function() {",
            "            on(this, 'movestart', enableMove2);",
            "            return false;",
            "         },",
            "",
            "         teardown: function() {",
            "            off(this, 'movestart', enableMove2);",
            "            return false;",
            "         },",
            "",
            "         add: add",
            "      };",
            "",
            "      jQuery.event.special.moveend = {",
            "         setup: function() {",
            "            on(this, 'movestart', enableMove3);",
            "            return false;",
            "         },",
            "",
            "         teardown: function() {",
            "            off(this, 'movestart', enableMove3);",
            "            return false;",
            "         },",
            "",
            "         add: add",
            "      };",
            "   });",
            "</script>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "-",
        "status": false
    },
    "|css| До | После": {
        "prefix": "w-css-twentytwenty",
        "body": [
            "<style id=\"w-css-twentytwenty\">",
            "   .twentytwenty-horizontal .twentytwenty-handle:before,",
            "   .twentytwenty-horizontal .twentytwenty-handle:after,",
            "   .twentytwenty-vertical .twentytwenty-handle:before,",
            "   .twentytwenty-vertical .twentytwenty-handle:after {",
            "      content: \" \";",
            "      display: block;",
            "      background: white;",
            "      position: absolute;",
            "      z-index: 30;",
            "      -webkit-box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-handle:before,",
            "   .twentytwenty-horizontal .twentytwenty-handle:after {",
            "      width: 3px;",
            "      height: 9999px;",
            "      left: 50%;",
            "      margin-left: -1.5px;",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-handle:before,",
            "   .twentytwenty-vertical .twentytwenty-handle:after {",
            "      width: 9999px;",
            "      height: 3px;",
            "      top: 50%;",
            "      margin-top: -1.5px;",
            "   }",
            "",
            "   .twentytwenty-before-label,",
            "   .twentytwenty-after-label,",
            "   .twentytwenty-overlay {",
            "      position: absolute;",
            "      top: 0;",
            "      width: 100%;",
            "      height: 100%;",
            "   }",
            "",
            "   .twentytwenty-before-label,",
            "   .twentytwenty-after-label,",
            "   .twentytwenty-overlay {",
            "      -webkit-transition-duration: 0.5s;",
            "      -moz-transition-duration: 0.5s;",
            "      transition-duration: 0.5s;",
            "   }",
            "",
            "   .twentytwenty-before-label,",
            "   .twentytwenty-after-label {",
            "      -webkit-transition-property: opacity;",
            "      -moz-transition-property: opacity;",
            "      transition-property: opacity;",
            "   }",
            "",
            "   .twentytwenty-before-label:before,",
            "   .twentytwenty-after-label:before {",
            "      color: white;",
            "      font-size: 13px;",
            "      letter-spacing: 0.1em;",
            "   }",
            "",
            "   .twentytwenty-before-label:before,",
            "   .twentytwenty-after-label:before {",
            "      position: absolute;",
            "      background: rgba(255, 255, 255, 0.2);",
            "      line-height: 38px;",
            "      padding: 0 20px;",
            "      -webkit-border-radius: 2px;",
            "      -moz-border-radius: 2px;",
            "      border-radius: 2px;",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-before-label:before,",
            "   .twentytwenty-horizontal .twentytwenty-after-label:before {",
            "      top: 50%;",
            "      margin-top: -19px;",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-before-label:before,",
            "   .twentytwenty-vertical .twentytwenty-after-label:before {",
            "      left: 50%;",
            "      margin-left: -45px;",
            "      text-align: center;",
            "      width: 90px;",
            "   }",
            "",
            "   .twentytwenty-left-arrow,",
            "   .twentytwenty-right-arrow,",
            "   .twentytwenty-up-arrow,",
            "   .twentytwenty-down-arrow {",
            "      width: 0;",
            "      height: 0;",
            "      border: 6px inset transparent;",
            "      position: absolute;",
            "   }",
            "",
            "   .twentytwenty-left-arrow,",
            "   .twentytwenty-right-arrow {",
            "      top: 50%;",
            "      margin-top: -6px;",
            "   }",
            "",
            "   .twentytwenty-up-arrow,",
            "   .twentytwenty-down-arrow {",
            "      left: 50%;",
            "      margin-left: -6px;",
            "   }",
            "",
            "   .twentytwenty-container {",
            "      -webkit-box-sizing: content-box;",
            "      -moz-box-sizing: content-box;",
            "      box-sizing: content-box;",
            "      z-index: 0;",
            "      overflow: hidden;",
            "      position: relative;",
            "      -webkit-user-select: none;",
            "      -moz-user-select: none;",
            "      -ms-user-select: none;",
            "   }",
            "",
            "   .twentytwenty-container img {",
            "      max-width: 100%;",
            "      position: absolute;",
            "      top: 0;",
            "      display: block;",
            "   }",
            "",
            "   .twentytwenty-container.active .twentytwenty-overlay,",
            "   .twentytwenty-container.active :hover.twentytwenty-overlay {",
            "      background: rgba(0, 0, 0, 0);",
            "   }",
            "",
            "   .twentytwenty-container.active .twentytwenty-overlay .twentytwenty-before-label,",
            "   .twentytwenty-container.active .twentytwenty-overlay .twentytwenty-after-label,",
            "   .twentytwenty-container.active :hover.twentytwenty-overlay .twentytwenty-before-label,",
            "   .twentytwenty-container.active :hover.twentytwenty-overlay .twentytwenty-after-label {",
            "      opacity: 0;",
            "   }",
            "",
            "   .twentytwenty-container * {",
            "      -webkit-box-sizing: content-box;",
            "      -moz-box-sizing: content-box;",
            "      box-sizing: content-box;",
            "   }",
            "",
            "   .twentytwenty-before-label {",
            "      opacity: 0;",
            "   }",
            "",
            "   .twentytwenty-before-label:before {",
            "      content: attr(data-content);",
            "   }",
            "",
            "   .twentytwenty-after-label {",
            "      opacity: 0;",
            "   }",
            "",
            "   .twentytwenty-after-label:before {",
            "      content: attr(data-content);",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-before-label:before {",
            "      left: 10px;",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-after-label:before {",
            "      right: 10px;",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-before-label:before {",
            "      top: 10px;",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-after-label:before {",
            "      bottom: 10px;",
            "   }",
            "",
            "   .twentytwenty-overlay {",
            "      -webkit-transition-property: background;",
            "      -moz-transition-property: background;",
            "      transition-property: background;",
            "      background: rgba(0, 0, 0, 0);",
            "      z-index: 25;",
            "   }",
            "",
            "   .twentytwenty-overlay:hover {",
            "      background: rgba(0, 0, 0, 0.5);",
            "   }",
            "",
            "   .twentytwenty-overlay:hover .twentytwenty-after-label {",
            "      opacity: 1;",
            "   }",
            "",
            "   .twentytwenty-overlay:hover .twentytwenty-before-label {",
            "      opacity: 1;",
            "   }",
            "",
            "   .twentytwenty-before {",
            "      z-index: 20;",
            "   }",
            "",
            "   .twentytwenty-after {",
            "      z-index: 10;",
            "   }",
            "",
            "   .twentytwenty-handle {",
            "      height: 38px;",
            "      width: 38px;",
            "      position: absolute;",
            "      left: 50%;",
            "      top: 50%;",
            "      margin-left: -22px;",
            "      margin-top: -22px;",
            "      border: 3px solid white;",
            "      -webkit-border-radius: 1000px;",
            "      -moz-border-radius: 1000px;",
            "      border-radius: 1000px;",
            "      -webkit-box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      z-index: 40;",
            "      cursor: pointer;",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-handle:before {",
            "      bottom: 50%;",
            "      margin-bottom: 22px;",
            "      -webkit-box-shadow: 0 3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: 0 3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: 0 3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "   }",
            "",
            "   .twentytwenty-horizontal .twentytwenty-handle:after {",
            "      top: 50%;",
            "      margin-top: 22px;",
            "      -webkit-box-shadow: 0 -3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: 0 -3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: 0 -3px 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-handle:before {",
            "      left: 50%;",
            "      margin-left: 22px;",
            "      -webkit-box-shadow: 3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: 3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: 3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "   }",
            "",
            "   .twentytwenty-vertical .twentytwenty-handle:after {",
            "      right: 50%;",
            "      margin-right: 22px;",
            "      -webkit-box-shadow: -3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      -moz-box-shadow: -3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "      box-shadow: -3px 0 0 white, 0px 0px 12px rgba(51, 51, 51, 0.5);",
            "   }",
            "",
            "   .twentytwenty-left-arrow {",
            "      border-right: 6px solid white;",
            "      left: 50%;",
            "      margin-left: -17px;",
            "   }",
            "",
            "   .twentytwenty-right-arrow {",
            "      border-left: 6px solid white;",
            "      right: 50%;",
            "      margin-right: -17px;",
            "   }",
            "",
            "   .twentytwenty-up-arrow {",
            "      border-bottom: 6px solid white;",
            "      top: 50%;",
            "      margin-top: -17px;",
            "   }",
            "",
            "   .twentytwenty-down-arrow {",
            "      border-top: 6px solid white;",
            "      bottom: 50%;",
            "      margin-bottom: -17px;",
            "   }",
            "</style>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "jQuery",
        "status": false
    },
    "|links| jQuery": {
        "prefix": "w-jQuery",
        "body": [
            "<script id=\"w-js-jquery\" src=\"https://code.jquery.com/jquery-3.7.1.slim.min.js\"></script>"
        ],
        "discription": "-",
        "group": "Зависимые",
        "dependence": "-",
        "status": false
    }
}